// Text to Specs Plugin (cmd ctrl t)
/*
  Author: Ken Moore

  The Text to Specs plugin lets you easily turn a text layer into a 'specs' layer (grouped
  with a background bounding rectangle w/ 15px padding). If you later edit the text, you
  can invoke the plugin again to re-fit the background layer.

  Since the text and background use shared styles, it's easy to change the style of all
  annotations to suit your preference.

  PRO TIP: Since the group layer name begins with "specs", you can use the Toggle Specs
  plugin to quickly toggle all annotations off and on.  
  (https://github.com/hrescak/sketchplugins)
*/


var textLayer = nil;
var rectLayer = nil;
var groupLayer = nil;

// Display an error alert
function alert(msg, title) {
  title = title || "alert";
  var app = [NSApplication sharedApplication];
  [app displayDialog:msg withTitle:title];
}

// Determine if a layer is an artboard
function isArtboard(layer) {
  var artboards = [[doc currentPage] artboards];
  for (var i = 0; i < [artboards length]; i++) {
    if ([artboards objectAtIndex: i] == layer) {
      return true;
    }
  }

  return false;
}

// Display an error alert and exit
function invalidSelection(details) {
  text = 'Select the text layer you wish to convert to a spec, or the group layer you wish to re-layout.';
  if (details) text += ' [' + details + ']';
  alert(text, 'Select text layer');
  throw(nil); // exit the plugin
}

// Validate selection, and assign proper layers to textLayer, rectLayer and groupLayer
function initSelection() {
  // Ensure there's only one layer selected
  if ([selection count] != 1) {
    invalidSelection('One layer must be selected');
  }

  layer = [selection objectAtIndex:0];

  // Assign / create layers to achieve group layer containing text + background layers
  if (layer instanceof MSLayerGroup) {
    groupLayer = layer;

    // If group is selected, only consider it valid if it has a text layer with a rect layer below
    children = [groupLayer layers];
    if ([children count] == 2) {
      textLayer = [children lastObject];
      rectLayer = [children firstObject];

      if (!(textLayer instanceof MSTextLayer) || rectLayer instanceof MSTextLayer) {
        invalidSelection('Group must contain a text layer with a rectangle layer below');
      }
    } else {
      invalidSelection('Group must contain only a text layer with a rectangle layer below');
    }
  } else if (layer instanceof MSTextLayer) {
    textLayer = layer;

    // If already inside a group, use that group, otherwise create a new one with rect layer
    groupLayer = [textLayer parentGroup];

    if (groupLayer && !(groupLayer instanceof MSPage) && !isArtboard(groupLayer)) {
      children = [groupLayer layers];
      if ([children count] == 2) {
        rectLayer = [children firstObject];
      } else {
        invalidSelection('Group must contain only a text layer with a rectangle layer below');
      }
    } else {
      // create the group layer
      groupLayer = MSLayerGroup.new();
      parent = textLayer.parentGroup();
      parent.addLayers([groupLayer]);

      // create the background layer
      var rectShape = MSRectangleShape.alloc().init();
      rectShape.frame = MSRect.rectWithRect(NSMakeRect(0, 0, 100, 100));
      rectLayer = [MSShapeGroup shapeWithPath: rectShape];
      rectLayer.name = 'spec background';
      groupLayer.addLayers([rectLayer]);
      
      // insert textLayer into group
      parent.removeLayer(textLayer);
      groupLayer.addLayers([textLayer]);
    }
  } else {
    invalidSelection();
  }
}


// Create shared style for specs text if it doesn't exist yet
function initTextSharedStyle() {
  var textStyles = doc.documentData().layerTextStyles();
  var textStylesLibrary = textStyles.objectsSortedByName();

  // loop through existing text styles, if "Specs text" already exists apply it and return
  for (var i = 0; i < [textStylesLibrary length]; i++) {
    if (textStylesLibrary[i].name() == 'Specs text') {
      [textLayer finishEditing];
      [textLayer setIsEditingText:false];
      print('just set editing false');
      textLayer.setStyle(textStylesLibrary[i].newInstance());
      return;
    }
  }

  // "Specs text" style doesn't exist, create it from current layer
  // But first, set the current text color to mid gray
  var color = MSColor.colorWithSVGString("#6C6C6C");
  [textLayer setTextColor: color];
  textStyles.addSharedStyleWithName_firstInstance("Specs text", textLayer.style());
}

// Restore the text style (color, shadow) to what it was prior to invoking the plugin
 function restoreTextStyle() {
  
}

// Create shared style for specs background rect if it doesn't exist yet
function initRectSharedStyle() {
  var layerStyles = doc.documentData().layerStyles();
  var layerStylesLibrary = layerStyles.objectsSortedByName();

  // loop through existing styles, if "Specs background" already exists apply it and return
  for (var i = 0; i < [layerStylesLibrary length]; i++) {
    if (layerStylesLibrary[i].name() == 'Specs background') {  
      rectLayer.setStyle(layerStylesLibrary[i].newInstance());
      return;
    }
  }

  // "Specs background" style doesn't exist, create it
  var style = MSStyle.alloc().init();

  // Setup fill
  var fill = style.fills().addNewStylePart();
  fill.color = MSColor.colorWithSVGString("#FFFCDC");

  // Setup stroke
  var border = style.borders().addNewStylePart();
  border.color = MSColor.colorWithSVGString("#CCCCCC");
  border.thickness = 1;

  // Setup shadow with default settings.
  var shadow = style.shadows().addNewStylePart();
  shadow.offsetX = 0;
  shadow.offsetY = 1;
  shadow.blurRadius = 0;
  shadow.spread = 0;
  var shadowColor = MSColor.colorWithSVGString("#000000");
  shadowColor.alpha = 0.2;
  shadow.color = shadowColor;

  // Add style to the container of shared styles.
  layerStyles.addSharedStyleWithName_firstInstance("Specs background", style);

  // Apply the style to rectLayer
  [rectLayer setStyle: style];
}

function resizeBackground(padding) {
  var textFrame = [textLayer frame];
  var rectFrame = [rectLayer frame];
  [rectFrame setX: [textFrame x] - padding]; 
  [rectFrame setY: [textFrame y] - padding]; 
  [rectFrame setWidth: [textFrame width] + padding * 2]; 
  [rectFrame setHeight: [textFrame height] + padding * 2]; 
  groupLayer.resizeRoot(true); // resize the group layer to match new contents
}


// MAIN

// validate selection, and assign proper layers to textLayer, rectLayer and groupLayer
initSelection();

// Create shared style for specs text if it doesn't exist yet
initTextSharedStyle();

// Create shared style for specs background rect if it doesn't exist yet
initRectSharedStyle();

// Set the name of the group layer to 'specs' so it can be targeted with toggle visibility plugin
[groupLayer setName: "specs: " + textLayer.stringValue().substr(0,20) + (textLayer.stringValue().length() > 20 ? '...' : '')];

// Resize the rect to wrap the text, specifying px of padding
resizeBackground(15);

// Select the group layer
textLayer.setIsSelected(false);
groupLayer.setIsSelected(true);

// Restore the prior text style
restoreTextStyle();
